import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.base import StorageKey
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from pymongo import MongoClient
from datetime import datetime
from bson.objectid import ObjectId
import datetime as dt
import logging
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

API_TOKEN = "7898171758:AAGodbxpbofXC568XzgJ7VPLiJ-flt8YokU"
ADMIN_ID = 349177382
CHANNEL_ID = "@vacancy228"


# API_TOKEN = "7652183042:AAHkGYirAKyb8iww0OAjQciL0MRHzbrtICQ"
# ADMIN_ID = 685600785
# CHANNEL_ID = "@rabota_minsk"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["vacancy"]
vacancies_collection = db["vacancies"]
settings_collection = db["settings"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
if not settings_collection.find_one({"key": "payment_instructions"}):
    settings_collection.insert_one({
        "key": "payment_instructions",
        "value": (
            "<b>–û–ø–ª–∞—Ç–∏—Ç–µ 5 BYN —á–µ—Ä–µ–∑ –ï–†–ò–ü:</b>\n"
            "üì± –ü–ª–∞—Ç–µ–∂–∏ ‚Üí –ï–†–ò–ü ‚Üí –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ/–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏ ‚Üí –ë–∞–Ω–∫–∏/–ù–ö–§–û ‚Üí –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ ‚Üí –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞\n"
            "–í –ø–æ–ª–µ <b>‚Ññ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ ‚Ññ —Ç–µ–∫. —Å—á–µ—Ç–∞</b> –≤–≤–µ–¥–∏—Ç–µ: <code>375447825825</code> ‚Üí –î–∞–ª–µ–µ\n"
            "–í –ø–æ–ª–µ <b>–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞, BYN</b> –≤–≤–µ–¥–∏—Ç–µ: <code>5</code> ‚Üí –î–∞–ª–µ–µ\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ ‚Üí –û–ø–ª–∞—Ç–∏—Ç—å\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ –∏ –æ–¥–æ–±—Ä–∏—Ç –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @saskovets"
        )
    })

if not settings_collection.find_one({"key": "channel_instruction"}):
    settings_collection.insert_one({
        "key": "channel_instruction",
        "value": (
            "üìå –ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ –∫–∞–Ω–∞–ª–µ\n"
            "üí¨ –ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.\n"
            "ü§ñ https://t.me/rabota_minsk_bot\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
            "1Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "–ö—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –±—ã–ª–æ –≤–∏–¥–Ω–æ, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ.\n"
            "2Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
            "–û–ø–∏—à–∏—Ç–µ, —á–µ–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, –∫–∞–∫–∏–µ –Ω—É–∂–Ω—ã –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç.\n"
            "3Ô∏è‚É£ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ BYN ‚Äî –∑–∞ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏–ª–∏ —Å–º–µ–Ω—É.\n"
            "4Ô∏è‚É£ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å, –≥—Ä–∞—Ñ–∏–∫ 2/2 –∏ —Ç.–¥.\n"
            "5Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏\n"
            "–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∏–∫ –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).\n\n"
            "‚ùóÔ∏è –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
            "üïü –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –≤–∞–∫–∞–Ω—Å–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏. –û–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 12 —á–∞—Å–æ–≤.\n"
            "üíµ –ü–ª–∞—Ç–Ω–æ ‚Äî –≤–∞–∫–∞–Ω—Å–∏—è –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ. –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è ‚Äî 5 BYN.\n\n"
            "üîé –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n"
            "–ö–∞–∂–¥–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã."
        ),
        "button_text": "–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É",
        "message_id": None
    })

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

class VacancyForm(StatesGroup):
    title = State()
    description = State()
    salary = State()
    employment = State()
    link = State()
    review = State()
    priority = State()
    payment_check = State()
    edit_payment = State()
    edit_channel_instruction = State()
    edit_channel_button = State()

VACANCIES_PER_PAGE = 5
MAX_MESSAGES_TO_DELETE = 50  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞ —Ä–∞–∑

async def send_and_log(chat_id, text, state, is_vacancy=False, **kwargs):
    try:
        msg = await bot.send_message(chat_id, text, **kwargs)
        data = await state.get_data()
        messages = data.get("messages_to_delete", [])
        vacancy_messages = data.get("vacancy_messages", [])
        if is_vacancy:
            vacancy_messages.append(msg.message_id)
        else:
            messages.append({"bot_msg_id": msg.message_id})
        await state.update_data(messages_to_delete=messages, vacancy_messages=vacancy_messages)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}: {msg.message_id}")
        return msg
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        raise

async def get_payment_instructions():
    setting = settings_collection.find_one({"key": "payment_instructions"})
    return setting["value"] if setting else "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

async def get_channel_instruction():
    setting = settings_collection.find_one({"key": "channel_instruction"})
    if setting:
        return setting["value"], setting.get("button_text", "–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É"), setting.get("message_id")
    return (
        "üìå –ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –≤ –∫–∞–Ω–∞–ª–µ\n"
        "üí¨ –ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.\n"
        "ü§ñ https://t.me/rabota_minsk_bot\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
        "1Ô∏è‚É£ –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
        "–ö—Ä–∞—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –±—ã–ª–æ –≤–∏–¥–Ω–æ, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ.\n"
        "2Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
        "–û–ø–∏—à–∏—Ç–µ, —á–µ–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è, –∫–∞–∫–∏–µ –Ω—É–∂–Ω—ã –Ω–∞–≤—ã–∫–∏ –∏ –æ–ø—ã—Ç.\n"
        "3Ô∏è‚É£ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞\n"
        "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ BYN ‚Äî –∑–∞ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏–ª–∏ —Å–º–µ–Ω—É.\n"
        "4Ô∏è‚É£ –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞, –ø–æ–ª–Ω—ã–π –¥–µ–Ω—å, –≥—Ä–∞—Ñ–∏–∫ 2/2 –∏ —Ç.–¥.\n"
        "5Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∏–∫ –≤ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username).\n\n"
        "‚ùóÔ∏è –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
        "üïü –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî –≤–∞–∫–∞–Ω—Å–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏. –û–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 12 —á–∞—Å–æ–≤.\n"
        "üíµ –ü–ª–∞—Ç–Ω–æ ‚Äî –≤–∞–∫–∞–Ω—Å–∏—è –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ. –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è ‚Äî 5 BYN.\n\n"
        "üîé –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n"
        "–ö–∞–∂–¥–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã."
    ), "–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", None

async def delete_messages(chat_id, messages, welcome_id, vacancy_messages):
    messages_to_delete = messages.copy()
    for msg in messages_to_delete:
        bot_msg_id = msg.get("bot_msg_id") if isinstance(msg, dict) else None
        user_msg_id = msg.get("user_msg_id") if isinstance(msg, dict) else None

        if not bot_msg_id and isinstance(msg, int):
            bot_msg_id = msg

        if bot_msg_id and bot_msg_id != welcome_id:
            try:
                await bot.delete_message(chat_id, bot_msg_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {bot_msg_id} –∏–∑ —á–∞—Ç–∞ {chat_id}")
                if user_msg_id:
                    await bot.delete_message(chat_id, user_msg_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {user_msg_id} –∏–∑ —á–∞—Ç–∞ {chat_id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {bot_msg_id}: {e}")
            finally:
                if msg in messages:
                    messages.remove(msg)

@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id == ADMIN_ID:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="view_payment")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="edit_payment")],
            [InlineKeyboardButton(text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ", callback_data="view_channel_instruction")],
            [InlineKeyboardButton(text="üì¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ", callback_data="post_channel_instruction")],
            [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="admin_view_vacancies|0")]
        ])
        welcome_msg = await send_and_log(
            message.chat.id,
            "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b> üåü\n\n"
            "–í—ã –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏—è–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            state,
            reply_markup=keyboard
        )
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
            [InlineKeyboardButton(text="üìú –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="view_my_vacancies|0")]
        ])
        welcome_msg = await send_and_log(
            message.chat.id,
            "üåü <b>–ü—Ä–∏–≤–µ—Ç!</b> üåü\n\n"
            "–Ø ‚Äî –±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ä–∞–±–æ—Ç–µ –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º ‚Äî —è –∑–∞–¥–∞–º 5 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç.\n\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ–ø–∞–¥—ë—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –∏ –≤—Å–∫–æ—Ä–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ.\n\n"
            "–•–æ—á–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏ –æ–±–æ–π—Ç–∏ –æ—á–µ—Ä–µ–¥—å? –î–æ—Å—Ç—É–ø–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏ ‚Äî —Å–∫–∞–∂—É, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤ –∫–æ–Ω—Ü–µ.\n\n"
            "–ù–∞–∂–º–∏ <b>–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é</b>, –∏ –ø–æ–µ—Ö–∞–ª–∏!",
            state,
            reply_markup=keyboard
        )
    await state.update_data(welcome_message_id=welcome_msg.message_id)

@dp.message(F.text == "/admin", F.from_user.id == ADMIN_ID)
async def cmd_admin(message: Message, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="view_payment")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="edit_payment")],
        [InlineKeyboardButton(text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ", callback_data="view_channel_instruction")],
        [InlineKeyboardButton(text="üì¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ", callback_data="post_channel_instruction")],
        [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
        [InlineKeyboardButton(text="üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="admin_view_vacancies|0")]
    ])
    welcome_msg = await send_and_log(
        message.chat.id,
        "üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        state,
        reply_markup=keyboard
    )
    await state.update_data(welcome_message_id=welcome_msg.message_id)

@dp.message(F.text == "/my_vacancies")
async def cmd_my_vacancies(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await send_and_log(
            message.chat.id,
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin.",
            state
        )
        return
    
    vacancies = list(vacancies_collection.find({"user_id": message.from_user.id}))
    await display_vacancies(message.chat.id, vacancies, state, page=0)

@dp.callback_query(F.data.startswith("view_my_vacancies"))
async def view_my_vacancies(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("|")[1])
    vacancies = list(vacancies_collection.find({"user_id": callback.from_user.id}))
    await display_vacancies(callback.message.chat.id, vacancies, state, page)
    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    except:
        pass

@dp.callback_query(F.data.startswith("admin_view_vacancies"))
async def admin_view_vacancies(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    page = int(callback.data.split("|")[1])
    vacancies = list(vacancies_collection.find())
    await display_all_vacancies(callback.message.chat.id, vacancies, state, page)
    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    except:
        pass

async def display_vacancies(chat_id, vacancies, state, page=0):
    if not vacancies:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ])
        await send_and_log(chat_id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.", state, reply_markup=keyboard)
        return
    
    approved = [v for v in vacancies if v.get("status") == "–û–¥–æ–±—Ä–µ–Ω–∞"]
    declined = [v for v in vacancies if v.get("status") == "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"]
    pending = [v for v in vacancies if v.get("status") == "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"]
    
    all_vacancies = (
        [(v, "–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ") for v in approved] +
        [(v, "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ") for v in declined] +
        [(v, "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏") for v in pending]
    )
    
    total_pages = (len(all_vacancies) + VACANCIES_PER_PAGE - 1) // VACANCIES_PER_PAGE
    start_idx = page * VACANCIES_PER_PAGE
    end_idx = min(start_idx + VACANCIES_PER_PAGE, len(all_vacancies))
    page_vacancies = all_vacancies[start_idx:end_idx]
    
    vacancy_text = f"üìú <b>–í–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ (—Å—Ç—Ä. {page + 1}/{total_pages}):</b>\n\n"
    for i, (vacancy, category) in enumerate(page_vacancies, start_idx + 1):
        vacancy_text += (
            f"{i}. <b>{vacancy.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b> ({category})\n"
            f"   üÜî ID: {vacancy['_id']}\n"
            f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   üí∞ –ó/–ü: {vacancy.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   üïí –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {vacancy.get('employment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   ‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: {vacancy.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        )
    
    keyboard = InlineKeyboardBuilder()
    if page > 0:
        keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_my_vacancies|{page - 1}"))
    if page < total_pages - 1:
        keyboard.add(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"view_my_vacancies|{page + 1}"))
    keyboard.row(InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="start_form"))
    keyboard.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start"))
    
    await send_and_log(chat_id, vacancy_text, state, reply_markup=keyboard.as_markup())

async def display_all_vacancies(chat_id, vacancies, state, page=0):
    if not vacancies:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
        ])
        await send_and_log(chat_id, "üì≠ –í–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", state, reply_markup=keyboard)
        return
    
    total_pages = (len(vacancies) + VACANCIES_PER_PAGE - 1) // VACANCIES_PER_PAGE
    start_idx = page * VACANCIES_PER_PAGE
    end_idx = min(start_idx + VACANCIES_PER_PAGE, len(vacancies))
    page_vacancies = vacancies[start_idx:end_idx]
    
    vacancy_text = f"üìã <b>–í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (—Å—Ç—Ä. {page + 1}/{total_pages}):</b>\n\n"
    for i, vacancy in enumerate(page_vacancies, start_idx + 1):
        vacancy_text += (
            f"{i}. <b>{vacancy.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b> ({vacancy.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')})\n"
            f"   üÜî ID: {vacancy['_id']}\n"
            f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{vacancy.get('username', vacancy.get('user_id'))}\n"
            f"   üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   üí∞ –ó/–ü: {vacancy.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   üïí –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {vacancy.get('employment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   ‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: {vacancy.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        )
    
    keyboard = InlineKeyboardBuilder()
    if page > 0:
        keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_view_vacancies|{page - 1}"))
    if page < total_pages - 1:
        keyboard.add(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_view_vacancies|{page + 1}"))
    for vacancy in page_vacancies:
        keyboard.row(InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å {vacancy['_id']}", callback_data=f"delete_vacancy|{vacancy['_id']}"))
    keyboard.row(InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="start_form"))
    keyboard.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start"))
    
    await send_and_log(chat_id, vacancy_text, state, reply_markup=keyboard.as_markup())

@dp.callback_query(F.data == "view_payment", F.from_user.id == ADMIN_ID)
async def view_payment_instructions(callback: CallbackQuery, state: FSMContext):
    instructions = await get_payment_instructions()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_payment")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ messages_to_delete –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    messages.append({"bot_msg_id": callback.message.message_id})
    await state.update_data(messages_to_delete=messages)
    
    await callback.message.edit_text(
        f"üí∏ <b>–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:</b>\n\n{instructions}",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "view_channel_instruction", F.from_user.id == ADMIN_ID)
async def view_channel_instruction(callback: CallbackQuery, state: FSMContext):
    instruction, button_text, message_id = await get_channel_instruction()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_channel_instruction")],
        [InlineKeyboardButton(text="üîó –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="edit_channel_button")],
        [InlineKeyboardButton(text="üì¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å", callback_data="post_channel_instruction")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ messages_to_delete –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    messages.append({"bot_msg_id": callback.message.message_id})
    await state.update_data(messages_to_delete=messages)
    
    await callback.message.edit_text(
        f"üì¢ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞:</b>\n\n{instruction}\n\n"
        f"üîó <b>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:</b> {button_text}\n"
        f"üÜî ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {message_id if message_id else '–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'}",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "edit_payment", F.from_user.id == ADMIN_ID)
async def start_edit_payment(callback: CallbackQuery, state: FSMContext):
    instructions = await get_payment_instructions()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ messages_to_delete –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    messages.append({"bot_msg_id": callback.message.message_id})
    await state.update_data(messages_to_delete=messages)
    
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ (–∫–Ω–æ–ø–∫–∞ \"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª\" –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):\n\n"
        f"{instructions}",
        reply_markup=keyboard
    )
    await state.set_state(VacancyForm.edit_payment)
    await callback.answer()

@dp.callback_query(F.data == "edit_channel_instruction", F.from_user.id == ADMIN_ID)
async def start_edit_channel_instruction(callback: CallbackQuery, state: FSMContext):
    instruction, _, _ = await get_channel_instruction()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ messages_to_delete –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    messages.append({"bot_msg_id": callback.message.message_id})
    await state.update_data(messages_to_delete=messages)
    
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):\n\n"
        f"{instruction}",
        reply_markup=keyboard
    )
    await state.set_state(VacancyForm.edit_channel_instruction)
    await callback.answer()

@dp.callback_query(F.data == "edit_channel_button", F.from_user.id == ADMIN_ID)
async def start_edit_channel_button(callback: CallbackQuery, state: FSMContext):
    _, button_text, _ = await get_channel_instruction()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ messages_to_delete –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    messages.append({"bot_msg_id": callback.message.message_id})
    await state.update_data(messages_to_delete=messages)
    
    await callback.message.edit_text(
        f"üîó –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞:\n\n{button_text}",
        reply_markup=keyboard
    )
    await state.set_state(VacancyForm.edit_channel_button)
    await callback.answer()

@dp.message(VacancyForm.edit_payment, F.from_user.id == ADMIN_ID)
async def process_new_payment_instructions(message: Message, state: FSMContext):
    settings_collection.update_one(
        {"key": "payment_instructions"},
        {"$set": {"value": message.text}},
        upsert=True
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_payment")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="edit_payment")],
        [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(
        message.chat.id,
        f"üí∏ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>\n\n{message.text}\n\n–û–Ω–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞—Ç–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        state,
        reply_markup=keyboard
    )
    await state.clear()

@dp.message(VacancyForm.edit_channel_instruction, F.from_user.id == ADMIN_ID)
async def process_new_channel_instruction(message: Message, state: FSMContext):
    settings_collection.update_one(
        {"key": "channel_instruction"},
        {"$set": {"value": message.text}},
        upsert=True
    )
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    vacancy_messages = data.get("vacancy_messages", [])
    welcome_id = data.get("welcome_message_id")

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ welcome_id
    messages_to_delete = messages.copy()
    messages_to_delete.append({"bot_msg_id": message.message_id})  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_messages(message.chat.id, messages_to_delete, welcome_id, vacancy_messages)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await state.update_data(messages_to_delete=[{"bot_msg_id": welcome_id}] if welcome_id else [])

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="view_payment")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="edit_payment")],
        [InlineKeyboardButton(text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ", callback_data="view_channel_instruction")],
        [InlineKeyboardButton(text="üì¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ", callback_data="post_channel_instruction")],
        [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
        [InlineKeyboardButton(text="üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="admin_view_vacancies|0")]
    ])
    if welcome_id:
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=welcome_id,
                text="üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {welcome_id}: {e}")
            welcome_msg = await send_and_log(
                message.chat.id,
                "üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                state,
                reply_markup=keyboard
            )
            await state.update_data(welcome_message_id=welcome_msg.message_id)
    else:
        welcome_msg = await send_and_log(
            message.chat.id,
            "üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            state,
            reply_markup=keyboard
        )
        await state.update_data(welcome_message_id=welcome_msg.message_id)

@dp.message(VacancyForm.edit_channel_button, F.from_user.id == ADMIN_ID)
async def process_new_channel_button(message: Message, state: FSMContext):
    settings_collection.update_one(
        {"key": "channel_instruction"},
        {"$set": {"button_text": message.text}},
        upsert=True
    )
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    vacancy_messages = data.get("vacancy_messages", [])
    welcome_id = data.get("welcome_message_id")

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ welcome_id
    messages_to_delete = messages.copy()
    messages_to_delete.append({"bot_msg_id": message.message_id})  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_messages(message.chat.id, messages_to_delete, welcome_id, vacancy_messages)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await state.update_data(messages_to_delete=[{"bot_msg_id": welcome_id}] if welcome_id else [])

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="view_payment")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="edit_payment")],
        [InlineKeyboardButton(text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ", callback_data="view_channel_instruction")],
        [InlineKeyboardButton(text="üì¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ", callback_data="post_channel_instruction")],
        [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
        [InlineKeyboardButton(text="üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="admin_view_vacancies|0")]
    ])
    if welcome_id:
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=welcome_id,
                text="üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {welcome_id}: {e}")
            welcome_msg = await send_and_log(
                message.chat.id,
                "üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                state,
                reply_markup=keyboard
            )
            await state.update_data(welcome_message_id=welcome_msg.message_id)
    else:
        welcome_msg = await send_and_log(
            message.chat.id,
            "üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            state,
            reply_markup=keyboard
        )
        await state.update_data(welcome_message_id=welcome_msg.message_id)

async def check_channel_message():
    _, _, message_id = await get_channel_instruction()
    if not message_id:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª –∏ –µ—Å—Ç—å –ª–∏ —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞
        chat = await bot.get_chat(CHANNEL_ID)
        if chat.type not in ["channel", "supergroup"]:
            logger.error(f"CHANNEL_ID {CHANNEL_ID} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π.")
            return None

        chat_member = await bot.get_chat_member(CHANNEL_ID, (await bot.get_me()).id)
        if chat_member.status not in ["administrator", "creator"]:
            logger.error("–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message = await bot.get_chat(CHANNEL_ID)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if chat.pinned_message and chat.pinned_message.message_id == message_id:
                logger.info(f"–ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ.")
                return message_id  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
            else:
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º –≤ –∫–∞–Ω–∞–ª–µ.")
                return None  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
        except Exception as e:
            logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
            return None  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ {CHANNEL_ID}: {e}")
        return None

async def post_channel_instruction(auto=False, chat_id=None, state=None):
    instruction, button_text, message_id = await get_channel_instruction()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=button_text, url="https://t.me/rabota_minsk_bot")]
    ])
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        existing_message_id = await check_channel_message()
        if existing_message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            try:
                await bot.edit_message_text(
                    chat_id=CHANNEL_ID,
                    message_id=existing_message_id,
                    text=instruction,
                    reply_markup=keyboard
                )
                logger.info(f"{'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' if auto else ''} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤ –∫–∞–Ω–∞–ª–µ: {existing_message_id}")
                return existing_message_id
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {existing_message_id}: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å
                try:
                    await bot.delete_message(CHANNEL_ID, existing_message_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {existing_message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {existing_message_id}: {e}")
                try:
                    await bot.unpin_chat_message(CHANNEL_ID, existing_message_id)
                    logger.info(f"–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {existing_message_id}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {existing_message_id}: {e}")

        # –û—á–∏—â–∞–µ–º message_id –≤ –±–∞–∑–µ, —Ç–∞–∫ –∫–∞–∫ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–±–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, –ª–∏–±–æ —É–¥–∞–ª–µ–Ω–æ
        settings_collection.update_one(
            {"key": "channel_instruction"},
            {"$set": {"message_id": None}},
            upsert=True
        )

        # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await bot.send_message(CHANNEL_ID, instruction, reply_markup=keyboard)
        settings_collection.update_one(
            {"key": "channel_instruction"},
            {"$set": {"message_id": msg.message_id}},
            upsert=True
        )
        await bot.pin_chat_message(CHANNEL_ID, msg.message_id, disable_notification=True)
        logger.info(f"{'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' if auto else ''} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –Ω–æ–≤—ã–π –ø–æ—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤ –∫–∞–Ω–∞–ª–µ: {msg.message_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã–∑–æ–≤–µ
        if chat_id and state and not auto:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_channel_instruction")],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_channel_instruction")],
                [InlineKeyboardButton(text="üîó –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="edit_channel_button")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
            ])
            await send_and_log(
                chat_id,
                "‚úÖ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!</b>",
                state,
                reply_markup=keyboard
            )
        return msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ {'–∞–≤—Ç–æ' if auto else ''}–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ: {e}")
        if chat_id and state and not auto:
            await send_and_log(
                chat_id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ.",
                state,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
                ])
            )
        return None

@dp.callback_query(F.data == "post_channel_instruction", F.from_user.id == ADMIN_ID)
async def post_channel_instruction_manual(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    welcome_id = data.get("welcome_message_id")
    vacancy_messages = data.get("vacancy_messages", [])

    messages_to_delete = messages.copy()
    messages_to_delete.append({"bot_msg_id": callback.message.message_id})
    await delete_messages(callback.message.chat.id, messages_to_delete, welcome_id, vacancy_messages)
    await state.update_data(messages_to_delete=messages_to_delete)

    await post_channel_instruction(auto=False, chat_id=callback.message.chat.id, state=state)
    await callback.answer()

async def monitor_channel_instruction():
    while True:
        if not await check_channel_message():
            await post_channel_instruction(auto=True)
        await asyncio.sleep(3600)

@dp.callback_query(F.data == "start_form")
async def begin_form(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    welcome_id = data.get("welcome_message_id")
    messages = data.get("messages_to_delete", [])
    vacancy_messages = data.get("vacancy_messages", [])
    
    messages_to_delete = messages.copy()
    messages_to_delete.append({"bot_msg_id": callback.message.message_id})
    await delete_messages(callback.message.chat.id, messages_to_delete, welcome_id, vacancy_messages)
    await state.update_data(messages_to_delete=[{"bot_msg_id": welcome_id}] if welcome_id else [])
    
    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    except:
        pass
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    await send_and_log(callback.message.chat.id, "üìù <b>–®–∞–≥ 1/5:</b> –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏. –≠—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏:", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.title)

@dp.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ back_to_start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    vacancy_messages = data.get("vacancy_messages", [])
    welcome_id = data.get("welcome_message_id")

    messages_to_delete = messages.copy()
    messages_to_delete.append({"bot_msg_id": callback.message.message_id})
    for msg in messages_to_delete:
        bot_msg_id = msg.get("bot_msg_id") if isinstance(msg, dict) else None
        user_msg_id = msg.get("user_msg_id") if isinstance(msg, dict) else None

        if bot_msg_id and bot_msg_id != welcome_id:
            try:
                await bot.delete_message(callback.message.chat.id, bot_msg_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {bot_msg_id} –∏–∑ —á–∞—Ç–∞ {callback.message.chat.id}")
                if user_msg_id:
                    await bot.delete_message(callback.message.chat.id, user_msg_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {user_msg_id} –∏–∑ —á–∞—Ç–∞ {callback.message.chat.id}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {bot_msg_id}: {e}")
            finally:
                if msg in messages:
                    messages.remove(msg)

    vacancy_messages_to_delete = vacancy_messages.copy()
    for msg_id in vacancy_messages_to_delete:
        if msg_id != welcome_id:
            try:
                await bot.delete_message(callback.message.chat.id, msg_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {msg_id} –∏–∑ —á–∞—Ç–∞ {callback.message.chat.id}")
                vacancy_messages.remove(msg_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {msg_id}: {e}")

    await state.update_data(messages_to_delete=messages, vacancy_messages=vacancy_messages)
    
    if callback.from_user.id == ADMIN_ID:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üëÄ –ü–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="view_payment")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="edit_payment")],
            [InlineKeyboardButton(text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ", callback_data="view_channel_instruction")],
            [InlineKeyboardButton(text="üì¨ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ", callback_data="post_channel_instruction")],
            [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
            [InlineKeyboardButton(text="üìã –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="admin_view_vacancies|0")]
        ])
        if welcome_id:
            try:
                await bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=welcome_id,
                    text="üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {welcome_id}: {e}")
                welcome_msg = await send_and_log(
                    callback.message.chat.id,
                    "üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    state,
                    reply_markup=keyboard
                )
                await state.update_data(welcome_message_id=welcome_msg.message_id)
        else:
            welcome_msg = await send_and_log(
                callback.message.chat.id,
                "üåü <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                state,
                reply_markup=keyboard
            )
            await state.update_data(welcome_message_id=welcome_msg.message_id)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="start_form")],
            [InlineKeyboardButton(text="üìú –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="view_my_vacancies|0")]
        ])
        if welcome_id:
            try:
                await bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=welcome_id,
                    text="üåü <b>–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> üåü\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {welcome_id}: {e}")
                welcome_msg = await send_and_log(
                    callback.message.chat.id,
                    "üåü <b>–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> üåü\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                    state,
                    reply_markup=keyboard
                )
                await state.update_data(welcome_message_id=welcome_msg.message_id)
        else:
            welcome_msg = await send_and_log(
                callback.message.chat.id,
                "üåü <b>–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> üåü\n\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                state,
                reply_markup=keyboard
            )
            await state.update_data(welcome_message_id=welcome_msg.message_id)
    
    await state.clear()
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ back_to_start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

@dp.message(VacancyForm.title)
async def process_title(message: Message, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        messages[-1]["user_msg_id"] = message.message_id
    await state.update_data(messages_to_delete=messages, title=message.text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_title")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(message.chat.id, "üìù <b>–®–∞–≥ 2/5:</b> –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.description)

@dp.callback_query(F.data == "back_to_title")
async def back_to_title(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        last_entry = messages.pop()
        try:
            await bot.delete_message(callback.message.chat.id, last_entry["bot_msg_id"])
            if "user_msg_id" in last_entry:
                await bot.delete_message(callback.message.chat.id, last_entry["user_msg_id"])
        except:
            pass
    await state.update_data(messages_to_delete=messages, description=None)
    
    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    except:
        pass
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])
    await send_and_log(callback.message.chat.id, "üìù <b>–®–∞–≥ 1/5:</b> –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏. –≠—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏:", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.title)

@dp.message(VacancyForm.description)
async def process_description(message: Message, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        messages[-1]["user_msg_id"] = message.message_id
    await state.update_data(messages_to_delete=messages, description=message.text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_description")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(message.chat.id, "üìù <b>–®–∞–≥ 3/5:</b> –£–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É:", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.salary)

@dp.callback_query(F.data == "back_to_description")
async def back_to_description(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        last_entry = messages.pop()
        try:
            await bot.delete_message(callback.message.chat.id, last_entry["bot_msg_id"])
            if "user_msg_id" in last_entry:
                await bot.delete_message(callback.message.chat.id, last_entry["user_msg_id"])
        except:
            pass
    await state.update_data(messages_to_delete=messages, salary=None)
    
    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    except:
        pass
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_title")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(callback.message.chat.id, "üìù <b>–®–∞–≥ 2/5:</b> –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.description)

@dp.message(VacancyForm.salary)
async def process_salary(message: Message, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        messages[-1]["user_msg_id"] = message.message_id
    await state.update_data(messages_to_delete=messages, salary=message.text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_salary")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(message.chat.id, "üìù <b>–®–∞–≥ 4/5:</b> –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞, —É–¥–∞–ª–µ–Ω–∫–∞, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, 2/2 –∏ —Ç.–¥):", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.employment)

@dp.callback_query(F.data == "back_to_salary")
async def back_to_salary(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        last_entry = messages.pop()
        try:
            await bot.delete_message(callback.message.chat.id, last_entry["bot_msg_id"])
            if "user_msg_id" in last_entry:
                await bot.delete_message(callback.message.chat.id, last_entry["user_msg_id"])
        except:
            pass
    await state.update_data(messages_to_delete=messages, employment=None)
    
    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    except:
        pass
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_description")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(callback.message.chat.id, "üìù <b>–®–∞–≥ 3/5:</b> –£–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É:", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.salary)

@dp.message(VacancyForm.employment)
async def process_employment(message: Message, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        messages[-1]["user_msg_id"] = message.message_id
    await state.update_data(messages_to_delete=messages, employment=message.text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_employment")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(message.chat.id, "üìù <b>–®–∞–≥ 5/5:</b> –£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º (–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ username –≤ Telegram):", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.link)

@dp.callback_query(F.data == "back_to_employment")
async def back_to_employment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        last_entry = messages.pop()
        try:
            await bot.delete_message(callback.message.chat.id, last_entry["bot_msg_id"])
            if "user_msg_id" in last_entry:
                await bot.delete_message(callback.message.chat.id, last_entry["user_msg_id"])
        except:
            pass
    await state.update_data(messages_to_delete=messages, link=None)
    
    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    except:
        pass
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_salary")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(callback.message.chat.id, "üìù <b>–®–∞–≥ 4/5:</b> –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞, —É–¥–∞–ª–µ–Ω–∫–∞, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, 2/2 –∏ —Ç.–¥):", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.employment)

@dp.message(VacancyForm.link)
async def process_link(message: Message, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        messages[-1]["user_msg_id"] = message.message_id
    await state.update_data(messages_to_delete=messages, link=message.text)
    
    review_text = (
        "üìã <b>–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è:</b>\n\n"
        f"üíº <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {data.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üïí <b>–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:</b> {data.get('employment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚òéÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:</b> {message.text}\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_link"), InlineKeyboardButton(text="‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data="proceed_to_priority")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(message.chat.id, review_text, state, reply_markup=keyboard)
    await state.set_state(VacancyForm.review)

@dp.callback_query(F.data == "back_to_link")
async def back_to_link(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        last_entry = messages.pop()
        try:
            await bot.delete_message(callback.message.chat.id, last_entry["bot_msg_id"])
            if "user_msg_id" in last_entry:
                await bot.delete_message(callback.message.chat.id, last_entry["user_msg_id"])
        except:
            pass
    await state.update_data(messages_to_delete=messages)
    
    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    except:
        pass
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_employment")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(callback.message.chat.id, "üìù <b>–®–∞–≥ 5/5:</b> –£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º (–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ username –≤ Telegram):", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.link)

@dp.callback_query(F.data == "proceed_to_priority")
async def proceed_to_priority(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    messages = data.get("messages_to_delete", [])
    if messages:
        last_entry = messages.pop()
        try:
            await bot.delete_message(callback.message.chat.id, last_entry["bot_msg_id"])
        except:
            pass
    await state.update_data(messages_to_delete=messages)
    
    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=None)
    except:
        pass
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –í–Ω–µ –æ—á–µ—Ä–µ–¥–∏", callback_data="priority_paid"), InlineKeyboardButton(text="üïì –û—á–µ—Ä–µ–¥—å", callback_data="priority_free")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    await send_and_log(callback.message.chat.id, "üì§ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b>\n\nüïî <b>–û—á–µ—Ä–µ–¥—å</b> - –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –∂–∏–≤–æ–π –æ—á–µ—Ä–µ–¥–∏. –ú–æ–¥–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 12 —á–∞—Å–æ–≤.\n\nüöÄ <b>–í–Ω–µ –æ—á–µ—Ä–µ–¥–∏</b> - –ü–ª–∞—Ç–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫—Ä–∞–π–Ω–µ –±—ã—Å—Ç—Ä–æ. –ú–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤.", state, reply_markup=keyboard)
    await state.set_state(VacancyForm.priority)

@dp.callback_query(VacancyForm.priority, F.data == "priority_free")
async def process_free_priority(callback: CallbackQuery, state: FSMContext):
    await state.update_data(priority="üïì –û–∂–∏–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏")
    await send_to_admin(callback, state)

@dp.callback_query(VacancyForm.priority, F.data == "priority_paid")
async def process_paid_priority(callback: CallbackQuery, state: FSMContext):
    await state.update_data(priority="üöÄ –°—Ä–∞–∑—É –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏—é (–æ–ø–ª–∞—á–µ–Ω–æ –≤—Ä—É—á–Ω—É—é)")
    instructions = await get_payment_instructions()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment"), InlineKeyboardButton(text="‚ùå –í –æ—á–µ—Ä–µ–¥—å", callback_data="send_as_free")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    full_text = f"üí∏ <b>–û–ø–ª–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n{instructions}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ \"‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª\":"
    await send_and_log(callback.message.chat.id, full_text, state, reply_markup=keyboard)
    await state.set_state(VacancyForm.payment_check)

@dp.callback_query(VacancyForm.payment_check, F.data == "check_payment")
async def check_payment(callback: CallbackQuery, state: FSMContext):
    await send_to_admin(callback, state)

@dp.callback_query(VacancyForm.payment_check, F.data == "send_as_free")
async def send_as_free(callback: CallbackQuery, state: FSMContext):
    await state.update_data(priority="üïì –û–∂–∏–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏")
    await send_to_admin(callback, state)

async def send_to_admin(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    admin_vacancy_text = (
        f"<b>{data.get('priority', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n\n"
        f"<b>üíº –í–∞–∫–∞–Ω—Å–∏—è:</b> {data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {data.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>üïí –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:</b> {data.get('employment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:</b> {data.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )
    
    vacancy = {
        "user_id": callback.from_user.id,
        "username": callback.from_user.username,
        "title": data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        "salary": data.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        "description": data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        "employment": data.get('employment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        "link": data.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        "priority": data.get('priority', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
        "status": "–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
        "created_at": datetime.now(dt.UTC),
        "channel_message_id": None
    }
    vacancy_id = vacancies_collection.insert_one(vacancy).inserted_id
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve|{vacancy_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline|{vacancy_id}"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_vacancy|{vacancy_id}")
    )
    builder.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start"))

    await send_and_log(ADMIN_ID, f"üì• <b>–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç @{callback.from_user.username or callback.from_user.id}:</b>\n\n{admin_vacancy_text}", state, is_vacancy=True, reply_markup=builder.as_markup())
    await callback.message.edit_reply_markup(reply_markup=None)
    
    data = await state.get_data()
    welcome_id = data.get("welcome_message_id")
    messages = data.get("messages_to_delete", [])
    vacancy_messages = data.get("vacancy_messages", [])
    await delete_messages(callback.message.chat.id, messages, welcome_id, vacancy_messages)
    await state.update_data(messages_to_delete=[{"bot_msg_id": welcome_id}] if welcome_id else [])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="start_form")],
        [InlineKeyboardButton(text="üìú –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="view_my_vacancies|0")]
    ])
    await send_and_log(callback.message.chat.id, "‚úÖ <b>–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>", state, reply_markup=keyboard)
    await state.clear()

@dp.callback_query(F.data.startswith("approve"))
async def approve_vacancy(callback: CallbackQuery, state: FSMContext):
    vacancy_id = callback.data.split("|")[1]
    vacancy_data = vacancies_collection.find_one({"_id": ObjectId(vacancy_id)})
    
    if not vacancy_data:
        await send_and_log(
            callback.message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞: –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            state
        )
        return
    
    user_id = vacancy_data.get("user_id")
    channel_message_id = vacancy_data.get("channel_message_id")
    
    if not user_id:
        await send_and_log(
            callback.message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            state
        )
        return
    
    channel_vacancy_text = (
        f"üíº <b>–í–∞–∫–∞–Ω—Å–∏—è:</b> {vacancy_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {vacancy_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ <b>–ó/–ü:</b> {vacancy_data.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üïí <b>–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:</b> {vacancy_data.get('employment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚òéÔ∏è <b>–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:</b> {vacancy_data.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )
    
    channel_msg = await bot.send_message(CHANNEL_ID, channel_vacancy_text)
    vacancies_collection.update_one(
        {"_id": ObjectId(vacancy_id)},
        {"$set": {"status": "–û–¥–æ–±—Ä–µ–Ω–∞", "updated_at": datetime.now(dt.UTC), "channel_message_id": channel_msg.message_id}}
    )
    
    user_state = FSMContext(dp.storage, key=StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="start_form")],
        [InlineKeyboardButton(text="üìú –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="view_my_vacancies|0")]
    ])
    await send_and_log(user_id, f"‚úÖ <b>–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è \"{vacancy_data.get('title')}\" –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!</b>", user_state, reply_markup=keyboard)
    await callback.message.edit_reply_markup(reply_markup=None)

@dp.callback_query(F.data.startswith("decline"))
async def decline_vacancy(callback: CallbackQuery, state: FSMContext):
    vacancy_id = callback.data.split("|")[1]
    vacancy_data = vacancies_collection.find_one({"_id": ObjectId(vacancy_id)})
    
    if not vacancy_data:
        await send_and_log(
            callback.message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞: –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            state
        )
        return
    
    user_id = vacancy_data.get("user_id")
    if not user_id:
        await send_and_log(
            callback.message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            state
        )
        return
    
    vacancies_collection.update_one(
        {"_id": ObjectId(vacancy_id)},
        {"$set": {"status": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞", "updated_at": datetime.now(dt.UTC)}}
    )
    
    user_state = FSMContext(dp.storage, key=StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id))
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="start_form")],
        [InlineKeyboardButton(text="üìú –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="view_my_vacancies|0")]
    ])
    await send_and_log(user_id, f"‚ùå <b>–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è \"{vacancy_data.get('title')}\" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>", user_state, reply_markup=keyboard)
    await callback.message.edit_reply_markup(reply_markup=None)
    await send_and_log(
        callback.message.chat.id,
        "‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
        state
    )

@dp.callback_query(F.data.startswith("delete_vacancy"))
async def delete_vacancy(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    vacancy_id = callback.data.split("|")[1]
    vacancy_data = vacancies_collection.find_one({"_id": ObjectId(vacancy_id)})
    
    if not vacancy_data:
        await send_and_log(
            callback.message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞: –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            state
        )
        return
    
    user_id = vacancy_data.get("user_id")
    channel_message_id = vacancy_data.get("channel_message_id")
    
    if channel_message_id:
        try:
            await bot.delete_message(CHANNEL_ID, channel_message_id)
        except:
            pass
    
    if user_id:
        user_state = FSMContext(dp.storage, key=StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id))
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è", callback_data="start_form")],
            [InlineKeyboardButton(text="üìú –ú–æ–∏ –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="view_my_vacancies|0")]
        ])
        await send_and_log(user_id, f"üóë <b>–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è \"{vacancy_data.get('title')}\" —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>", user_state, reply_markup=keyboard)
    
    vacancies_collection.delete_one({"_id": ObjectId(vacancy_id)})
    
    await callback.message.edit_reply_markup(reply_markup=None)
    await send_and_log(
        callback.message.chat.id,
        "üóë –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
        state
    )

async def main():
    asyncio.create_task(monitor_channel_instruction())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())